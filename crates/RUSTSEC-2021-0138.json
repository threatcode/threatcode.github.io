{
  "id": "RUSTSEC-2021-0138",
  "modified": "2022-08-13T05:17:38Z",
  "published": "2021-10-14T12:00:00Z",
  "aliases": [],
  "related": [],
  "summary": "Incorrect use of `set_len` allows for un-initialized memory",
  "details": "Affected versions of this crate passes an uninitialized buffer to a user-provided `Read` \nimplementation.\n\nArbitrary `Read` implementations can read from the uninitialized buffer (memory exposure)\nand also can return incorrect number of bytes written to the buffer.\nReading from uninitialized memory produces undefined values that can quickly invoke\nundefined behavior.\n\nNote: there is only UB in the case where a user provides a struct whose `Read`\nimplementation inspects the buffer passed to `read_exact` before writing to it.\nThis is an unidiomatic (albeit possible) `Read` implementation.\n\nSee https://github.com/MaterializeInc/materialize/issues/8669 for details.",
  "affected": [
    {
      "package": {
        "ecosystem": "crates.io",
        "name": "mz-avro",
        "purl": "pkg:cargo/mz-avro"
      },
      "ecosystem_specific": {
        "affects": {
          "arch": [],
          "os": [],
          "functions": []
        }
      },
      "database_specific": {
        "categories": [
          "memory-exposure"
        ],
        "cvss": null,
        "informational": "unsound"
      },
      "ranges": [
        {
          "type": "SEMVER",
          "events": [
            {
              "introduced": "0.0.0-0"
            },
            {
              "fixed": "0.7.0"
            }
          ]
        }
      ]
    }
  ],
  "references": [
    {
      "type": "PACKAGE",
      "url": "https://crates.io/crates/mz-avro"
    },
    {
      "type": "ADVISORY",
      "url": "https://rustsec.org/advisories/RUSTSEC-2021-0138.html"
    },
    {
      "type": "REPORT",
      "url": "https://github.com/MaterializeInc/materialize/issues/8669"
    }
  ]
}